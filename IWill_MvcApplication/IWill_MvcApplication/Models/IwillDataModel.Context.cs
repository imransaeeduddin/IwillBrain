//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IWill_MvcApplication.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IwillDbEntities : DbContext
    {
        public IwillDbEntities()
            : base("name=IwillDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<CoachTaughtBy> CoachTaughtBies { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CourseCategory> CourseCategories { get; set; }
        public virtual DbSet<CourseCoach> CourseCoaches { get; set; }
        public virtual DbSet<CourseDetail> CourseDetails { get; set; }
        public virtual DbSet<CourseLanguage> CourseLanguages { get; set; }
        public virtual DbSet<CourseMaterialType> CourseMaterialTypes { get; set; }
        public virtual DbSet<CourseOutline> CourseOutlines { get; set; }
        public virtual DbSet<EducationType> EducationTypes { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<MartialStatu> MartialStatus { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<QuestionsDetail> QuestionsDetails { get; set; }
        public virtual DbSet<QuestionType> QuestionTypes { get; set; }
        public virtual DbSet<Quiz> Quizs { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TempPic> TempPics { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserEducation> UserEducations { get; set; }
        public virtual DbSet<UserEnrollCourse> UserEnrollCourses { get; set; }
        public virtual DbSet<UserExperience> UserExperiences { get; set; }
        public virtual DbSet<UserGivenQuesAn> UserGivenQuesAns { get; set; }
        public virtual DbSet<UserQuestionDetail> UserQuestionDetails { get; set; }
        public virtual DbSet<UserQuestion> UserQuestions { get; set; }
        public virtual DbSet<UserQuizAnswer> UserQuizAnswers { get; set; }
        public virtual DbSet<UserQuizAttemp> UserQuizAttemps { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<UserFollower> UserFollowers { get; set; }
        public virtual DbSet<Year> Years { get; set; }
    
        public virtual ObjectResult<spSearhUser_Result> spSearhUser(string userName, Nullable<int> rID, Nullable<bool> isActive)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var rIDParameter = rID.HasValue ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearhUser_Result>("spSearhUser", userNameParameter, rIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<spSearchUserRegestrationQuestions_Result> spSearchUserRegestrationQuestions(string ques, Nullable<bool> isStudent, Nullable<int> questionType, Nullable<bool> isActive)
        {
            var quesParameter = ques != null ?
                new ObjectParameter("Ques", ques) :
                new ObjectParameter("Ques", typeof(string));
    
            var isStudentParameter = isStudent.HasValue ?
                new ObjectParameter("IsStudent", isStudent) :
                new ObjectParameter("IsStudent", typeof(bool));
    
            var questionTypeParameter = questionType.HasValue ?
                new ObjectParameter("QuestionType", questionType) :
                new ObjectParameter("QuestionType", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchUserRegestrationQuestions_Result>("spSearchUserRegestrationQuestions", quesParameter, isStudentParameter, questionTypeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<spGetRegUserQuestion_Result> spGetRegUserQuestion(Nullable<long> uID)
        {
            var uIDParameter = uID.HasValue ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRegUserQuestion_Result>("spGetRegUserQuestion", uIDParameter);
        }
    }
}
